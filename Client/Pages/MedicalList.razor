@page "/medical-list"
@using VeterinarSite.Shared.Models
@using VeterinarSite.Client.Pages.AdministratorPage
@using Microsoft.AspNetCore.SignalR.Client
@using System.Globalization
@inject DialogService dialogService
@inject IMedicalWorker _medicalworkerservice;
@inject NavigationManager navManager;

<PageTitle>Lista Medicilor Veterinari</PageTitle>

<div class="container-xl min-vh-100">
    <AuthorizeView Roles="Admin">
        <div class="row justify-content-end">
            <button class="btn btn-success w-25" @onclick="@(arg => OpenDialog())">Adauga inregistrare</button>
        </div>
    </AuthorizeView>

    <div class="table-responsive">

        <RadzenDataGrid @ref="grid"
                        AllowFiltering="true"
                        FilterMode="FilterMode.Advanced"
                        PageSize="30"
                        AllowPaging="true"
                        AllowSorting="true"
                        Data="@orders"
                        TItem="VeterinarWorkerModel"
                        ColumnWidth="300px"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        LogicalFilterOperator="LogicalFilterOperator.Or"
                        Responsive="@true"
                        Culture="@(new CultureInfo("ro-RO"))"
                        EqualsText="Egal"
                        AndOperatorText="Și"
                        OrOperatorText="Sau" NotEqualsText="Nu este egal" 
                        StartsWithText="Începe cu" 
                        EndsWithText="Termină cu" 
                        DoesNotContainText="Nu conține textul"
                        IsNullText="Este null"
                        IsEmptyText="Este gol" 
                        IsNotEmptyText="Nu este gol" 
                        IsNotNullText="Nu este null">
            <Columns>
                <RadzenDataGridColumn TItem="VeterinarWorkerModel" Property="FirstName" Title="Nume" FormatString="{0:d}"/>
                <RadzenDataGridColumn TItem="VeterinarWorkerModel" Property="lastName" Title="Prenume" FormatString="{0:d}"/>
                <RadzenDataGridColumn TItem="VeterinarWorkerModel" Property="Email" Title="E-mail" FormatString="{0:d}"/>
                <RadzenDataGridColumn TItem="VeterinarWorkerModel" Property="Phone" Title="Telefon"/>
                <RadzenDataGridColumn TItem="VeterinarWorkerModel" Property="DateEnterCMv" Title="Data înscrierii în CMV"/>
                <RadzenDataGridColumn TItem="VeterinarWorkerModel" Property="DiplomNumber" Title="Diploma seria/numărul"/>
                <RadzenDataGridColumn TItem="VeterinarWorkerModel" Property="CodCMV" Title="Codul medicului veterinar atribuit de CMV "/>
                <RadzenDataGridColumn TItem="VeterinarWorkerModel" Property="IsActive" Title="Statut"/>
                <RadzenDataGridColumn TItem="VeterinarWorkerModel" Property="Sanctions" Title="Sancțiuni"/>
                <AuthorizeView Roles="Admin">
                    <RadzenDataGridColumn TItem="VeterinarWorkerModel" Property="" Title="Acțiuni">
                        <Template Context="actions">
                            <RadzenButton
                                Click="() => DeleteRecord(((VeterinarWorkerModel)actions).Id)"
                                Icon="clear"
                                Style="background-color: red;color: white;"/>
                            <RadzenButton
                                Click="() => EditRecord(((VeterinarWorkerModel)actions).Id)"
                                Icon="edit"
                                tyle="color: white; background-color: darkgreen"/>
                        </Template>

                    </RadzenDataGridColumn>
                </AuthorizeView>
            </Columns>
        </RadzenDataGrid>
    </div>
</div>


@code
{
    RadzenDataGrid<VeterinarWorkerModel> grid;
    IEnumerable<VeterinarWorkerModel> orders { get; set; } = new List<VeterinarWorkerModel>();

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        orders = await _medicalworkerservice.GetAll();
        await GetHubConnection();
        if (hubConnection.State == HubConnectionState.Connected)
        {
            Console.WriteLine("Connection was stablished succesifully!!");
        }
    }

    private async Task OpenDialog()
    {
        await dialogService.OpenAsync<AddMEdicalWorkerField>("Adauga un lucrator Mediacal Nou",
            new Dictionary<string, object>(),
            new DialogOptions()
            {
                Width = "800px",
                Height = "530px",
                Resizable = true,
                Draggable = true
            });
    }

    private async Task DeleteRecord(Guid? Id)
    {
        var result = await dialogService.OpenAsync("Sterge inregistrare", ds =>
            @<div>
                <p>Sigur doriti sa stergeti inregistrarea?</p>
                <div class="row">
                    <div class="col-md-12">
                        <RadzenButton Text="Da" Click="() => ConfirmDelete(Id.Value)"/>
                        <RadzenButton Text="Nu" Click="() => ds.Close()"/>
                    </div>
                </div>
            </div>);
    }

    private async Task EditRecord(Guid? Id)
    {
        await dialogService.OpenAsync<AddMEdicalWorkerField>("Editeaza un lucrator Mediacal",
            new Dictionary<string, object>() { { "Id", Id } },
            new DialogOptions()
            {
                Width = "800px",
                Height = "530px",
                Resizable = true,
                Draggable = true
            });
    }

    private async Task ConfirmDelete(Guid Id)
    {
        await BusyDialog();
        orders = await _medicalworkerservice.Delete(Id);
        await grid.Reload();
        dialogService.Close();
    }

    async Task BusyDialog()
    {
        await DialogService.OpenAsync("", ds =>
            @<div>
                <div class="row">
                    <div class="col-md-12">
                        Loading...
                    </div>
                </div>
            </div>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto" });
    }

    private async Task GetHubConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navManager.ToAbsoluteUri("/updateDataHub"))
            .WithAutomaticReconnect()
            .Build();
        var test = hubConnection;
        hubConnection.On("NotifyMedicalWorkersHasChanged", async () =>
        {
            orders = await _medicalworkerservice.GetAll();
            StateHasChanged();
            Console.WriteLine("connection was invoked");
            grid.Reload();
        });
        await hubConnection.StartAsync();
    }

}