@page "/comision"
@using VeterinarSite.Shared.Models.BiroulExecutiv
@using Microsoft.AspNetCore.SignalR.Client
@using VeterinarSite.Shared.Services.ComisiaDeDenotologiesilitigii
@inject DialogService dialogService
@inject IComisionService _service;
@inject NavigationManager navManager;

<div class="container-xl bg-white min-vh-100">
    <PageTitle>Comisia de dentologie si litigii</PageTitle>
    <div class="d-flex w-100 my-2">
        <h3 class="mx-auto" style="font-weight: bold;
                                         background: #c6e9f5;
                                         padding: 10px;
                                         border: 1px solid white;
                                         border-radius: 10%;">Comisia de dentologie si litigii</h3>
    </div>
    <AuthorizeView Roles="Admin">
        <div class="row justify-content-end mb-3">
            <div class="col-4">
                <RadzenButton Style="color: white;background-color: green; padding: 5px;" Click="() => AddOrUpdate(Guid.Empty)" Icon="add">Adaugă înregistrare</RadzenButton>
            </div>
        </div>
    </AuthorizeView>

    <div class="table-responsive">
        <table class="table table-striped table-bordered table-hover">
            <thead>
            <th scope="col">Nume</th>
            <th scope="col">Prenume</th>
            <th scope="col">Funcția</th>
            <th scope="col">Email</th>
            <th scope="col">Telefon</th>
            </thead>
            <tbody>
            @foreach (var item in model)
            {
                <tr>
                    <td>@item.FirstName</td>
                    <td>@item.lastName</td>
                    <td>@item.Function</td>
                    <td>@item.Email</td>
                    <td>@item.Phone</td>
                    <AuthorizeView Roles="Admin">
                        <td>
                            <div class="d-flex gap-1">
                                <RadzenButton Style="background-color: red;color: white" Click="() => DeleteRecord(item.Id)" Icon="clear"/>
                                <RadzenButton Style="background-color: #0c63e4;color: white;" Click="@(() => AddOrUpdate(item.Id.Value))" Icon="edit"/>
                                @* <RadzenUpload Multiple="false" Url="@($"api/BiroulExecutive/upload/{item.Id}")"/> *@
                            </div>
                        </td>
                    </AuthorizeView>
                </tr>
            }

            </tbody>
        </table>
    </div>
</div>

@code {
    private IEnumerable<ComisionModel> model { get; set; }
    private HubConnection HubConnection { get; set; }

    protected override async Task OnInitializedAsync()
    {
        model = new List<ComisionModel>();
        await GetDataFronServerAsync();
        await Getconnection();
        StateHasChanged();
    }

    private async Task GetDataFronServerAsync()
    {
        model = await _service.GetAll();
        StateHasChanged();
    }

    private async Task Upload(Guid Id)
    {
    }

    private async Task DeleteRecord(Guid? Id)
    {
        var result = await dialogService.OpenAsync("Sterge inregistrare", ds =>
            @<div>
                <p>Sigur doriti sa stergeti inregistrarea?</p>
                <div class="row">
                    <div class="col-md-12">
                        <RadzenButton Text="Da" Click="() => ConfirmDelete(Id.Value)"/>
                        <RadzenButton Text="Nu" Click="() => ds.Close()"/>
                    </div>
                </div>
            </div>);
    }

    private async Task ConfirmDelete(Guid Id)
    {
        ;
        await _service.Delete(Id);
        dialogService.Close();
    }

    private async Task AddOrUpdate(Guid Id)
    {
        var text = Id == Guid.Empty ? "Adaugarea inregistrarii noi" : "Editeaza inregistrarea";
        await dialogService.OpenAsync<BiroulExecutivAddOrUpdatePage>(text,
            new Dictionary<string, object>() { { "Id", Id }, { "InterfaceName", "IComisionService" } },
            new DialogOptions()
            {
                Width = "800px",
                Height = "530px",
                Resizable = true,
                Draggable = true
            });
    }

    private async Task Getconnection()
    {
        HubConnection = new HubConnectionBuilder()
            .WithUrl(navManager.ToAbsoluteUri("/biroulExecutivHub"))
            .WithAutomaticReconnect()
            .Build();
        var test = HubConnection;
        HubConnection.On("ComisonUpdateData", async () =>
        {
            await GetDataFronServerAsync();
            dialogService.Close();
            StateHasChanged();
            Console.WriteLine("connection was invoked");
        });
        await HubConnection.StartAsync();
    }


}